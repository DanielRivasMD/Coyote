////////////////////////////////////////////////////////////////////////////////////////////////////

// standard libraries
use anyhow::{
  Context,
  Result as anyResult,
};
use rand::{
  rng,
  seq::SliceRandom,
};
use std::io;

////////////////////////////////////////////////////////////////////////////////////////////////////

// error handler
use crate::utils::error::CoyoteError;

////////////////////////////////////////////////////////////////////////////////////////////////////

// crate utilities
use crate::{
  custom::fields::Fields,
  utils::sql::{
    get_memory,
    set_conn_db,
  },
};
use crate::utils::cli::train_cli;

////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO: set filter from date onwards
pub fn train(lang: String) -> anyResult<()> {
  // set connection
  let conn = &mut set_conn_db()?;

  train_cli(conn, lang)?;

  Ok(())
}

////////////////////////////////////////////////////////////////////////////////////////////////////

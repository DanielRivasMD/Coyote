////////////////////////////////////////////////////////////////////////////////////////////////////

// standard libraries
use anyhow::Result as anyResult;
use anyhow::Context;
use bytelines::ByteLines;
use bytelines::ByteLinesReader;
use std::fs::File;
use std::io::BufReader;
use std::path::PathBuf;

////////////////////////////////////////////////////////////////////////////////////////////////////

// error handler
use crate::utils::error::CoyoteError;

////////////////////////////////////////////////////////////////////////////////////////////////////

pub fn byte_file_reader(input_file: PathBuf) -> anyResult<ByteLines<BufReader<File>>> {
  let file =
    File::open(&input_file).context(CoyoteError::ReadFile {
      f: input_file.into(),
    })?;

  let reader = BufReader::new(file);

  let lines = reader.byte_lines();
  Ok(lines)
}

////////////////////////////////////////////////////////////////////////////////////////////////////
